name: WordPress Import (Batch Processing)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Import mode (sync or override)'
        required: false
        default: 'sync'
      product_limit:
        description: 'Total number of products to import (across all batches)'
        required: false
        default: '100'
      wp_api_url:
        description: 'WordPress API URL'
        required: false
        default: ''
      wp_api_key:
        description: 'WordPress API key'
        required: false
        default: ''

permissions:
  contents: read

jobs:
  import_to_wordpress:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 📥 Handle Git LFS files
        run: |
          echo "=== Handling Git LFS files ==="
          # Install git-lfs if not available
          if ! command -v git-lfs &> /dev/null; then
            echo "Installing git-lfs..."
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get install git-lfs
          fi
          
          # Initialize git-lfs and pull actual files
          git lfs install
          git lfs pull
          
          echo "=== Checking batch files after LFS pull ==="
          ls -la batch/ 2>/dev/null || echo "No batch directory found"
          find . -name "*.jsonl" -type f | head -10 || echo "No JSONL files found"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📥 Fetch latest files from artifacts branch
        run: |
          echo "=== Fetching latest files from artifacts branch ==="

          # Create batch directory and clear it
          mkdir -p batch
          rm -f batch/*.jsonl
          echo "✅ Cleared batch directory"

          # Check if artifacts branch exists
          if git ls-remote --heads origin artifacts | grep -q artifacts; then
            echo "✅ Artifacts branch exists, fetching latest files..."

            # Fetch the artifacts branch
            git fetch origin artifacts:artifacts || echo "Could not fetch artifacts branch"

            # Check what we have in the artifacts branch
            echo "=== Contents of artifacts branch ==="
            git ls-tree -r artifacts --name-only | grep -E "\.(jsonl|json)$" || echo "No JSON/JSONL files found in artifacts branch"

            # Pull LFS files from artifacts branch specifically
            echo "=== Pulling LFS files from artifacts branch ==="
            git lfs pull origin artifacts --include="batch/*.jsonl" || echo "No LFS files to pull from artifacts branch"
            
            # Also try to checkout specific files from artifacts branch
            echo "=== Checking out batch files from artifacts branch ==="
            git checkout artifacts -- batch/ 2>/dev/null || echo "Could not checkout batch files from artifacts branch"

            # Copy latest files if they exist (handle Git LFS)
            if [ -f "artifacts/espscraper/data/api_scraped_links.jsonl" ]; then
              cp artifacts/espscraper/data/api_scraped_links.jsonl espscraper/data/
              echo "✅ Updated api_scraped_links.jsonl from artifacts branch"
            fi

            if [ -f "artifacts/final_product_details.jsonl" ]; then
              cp artifacts/final_product_details.jsonl espscraper/data/
              echo "✅ Updated final_product_details.jsonl from artifacts branch"
            fi

            # Copy batch files with better error handling
            if [ -d "artifacts/batch" ]; then
              echo "=== Copying batch files from artifacts/batch/ ==="
              ls -la artifacts/batch/ || echo "No files in artifacts/batch/"
              
              # First, ensure we have the actual files (not LFS pointers)
              echo "=== Checking if batch files are LFS pointers ==="
              for file in artifacts/batch/*.jsonl; do
                if [ -f "$file" ]; then
                  echo "File: $file"
                  file -b "$file" || echo "Could not determine file type"
                  head -c 100 "$file" || echo "Could not read file"
                fi
              done
              
              # Try to pull LFS files specifically for batch directory
              echo "=== Pulling LFS files for batch directory ==="
              git lfs pull --include="batch/*.jsonl" || echo "No LFS files to pull for batch"
              
              # Copy all JSONL files from artifacts/batch to local batch/
              echo "=== Copying batch files ==="
              cp artifacts/batch/*.jsonl batch/ 2>/dev/null || echo "No batch files to copy"
              
              echo "=== Batch files after copy ==="
              ls -la batch/ || echo "No batch files found after copy"
              
              # Verify the copied files are actual files, not pointers
              echo "=== Verifying copied batch files ==="
              for file in batch/*.jsonl; do
                if [ -f "$file" ]; then
                  echo "Copied file: $file"
                  file -b "$file" || echo "Could not determine file type"
                  wc -l "$file" || echo "Could not count lines"
                fi
              done
            else
              echo "⚠️ No artifacts/batch directory found"
            fi

            # Show file sizes after update
            echo "=== File sizes after update ==="
            ls -la espscraper/data/*.jsonl 2>/dev/null || echo "No JSONL files found in espscraper/data"
            ls -la batch/*.jsonl 2>/dev/null || echo "No batch files found in batch/"

          else
            echo "⚠️ Artifacts branch does not exist yet, starting fresh"
          fi

      - name: Fetch API URL and Key from WordPress (Optional)
        id: get_params
        run: |
          # Try to fetch from WordPress, but don't fail if it doesn't work
          curl -s -u "${{ secrets.WP_BASIC_AUTH_USER }}:${{ secrets.WP_BASIC_AUTH_PASS }}" "$WP_BASE_URL/wp-json/promostandards-importer/v1/github-params?secret=${{ secrets.WP_API_SECRET }}" > params.json || echo '{"api_url": "", "api_key": ""}' > params.json
          
          # Use WordPress values if available, otherwise use input parameters
          WP_API_URL_FROM_WP=$(jq -r .api_url params.json)
          WP_API_KEY_FROM_WP=$(jq -r .api_key params.json)
          
          # Use WordPress values if not empty, otherwise use input parameters
          if [ "$WP_API_URL_FROM_WP" != "" ] && [ "$WP_API_URL_FROM_WP" != "null" ]; then
            echo "WP_API_URL=$WP_API_URL_FROM_WP" >> $GITHUB_ENV
            echo "WP_API_KEY=$WP_API_KEY_FROM_WP" >> $GITHUB_ENV
            echo "Using WordPress configuration"
          else
            echo "WP_API_URL=${{ github.event.inputs.wp_api_url }}" >> $GITHUB_ENV
            echo "WP_API_KEY=${{ github.event.inputs.wp_api_key }}" >> $GITHUB_ENV
            echo "Using input parameters"
          fi
          
          echo "WordPress integration status: $(jq -r .api_url params.json | grep -q '^$' && echo 'Not configured' || echo 'Configured')"
        env:
          WP_BASE_URL: ${{ secrets.WP_BASE_URL }}

      - name: Debug API URL and Key
        run: |
          echo "=== Debug: API URL and Key ==="
          echo "WP_API_URL: '$WP_API_URL'"
          echo "WP_API_KEY: '$WP_API_KEY'"
          echo "WP_BASE_URL: '$WP_BASE_URL'"
          echo "WP_BASIC_AUTH_USER: '$WP_BASIC_AUTH_USER'"
          echo "Params file content:"
          cat params.json || echo "No params.json file found"
          echo "=== End Debug ==="
        env:
          WP_API_URL: ${{ env.WP_API_URL }}
          WP_API_KEY: ${{ env.WP_API_KEY }}
          WP_BASE_URL: ${{ secrets.WP_BASE_URL }}
          WP_BASIC_AUTH_USER: ${{ secrets.WP_BASIC_AUTH_USER }}

      - name: 🚀 Run WordPress Import
        run: |
          echo "=== Starting WordPress Import ==="
          echo "Mode: ${{ github.event.inputs.mode || 'sync' }}"
          echo "Product Limit: ${{ github.event.inputs.product_limit || '100' }}"
          echo "API URL: $WP_API_URL"
          echo "API Key: ${WP_API_KEY:0:10}..." # Show first 10 chars of API key
          echo "Basic Auth User: $WP_BASIC_AUTH_USER"
          echo "=== Running Import Script ==="
          
          python3 import_to_wordpress.py \
            --mode ${{ github.event.inputs.mode || 'sync' }} \
            --product-limit ${{ github.event.inputs.product_limit || '100' }} \
            --wp-api-url "$WP_API_URL" \
            --wp-api-key "$WP_API_KEY" \
            --wp-basic-auth-user "$WP_BASIC_AUTH_USER" \
            --wp-basic-auth-pass "$WP_BASIC_AUTH_PASS"
        env:
          WP_API_URL: ${{ env.WP_API_URL }}
          WP_API_KEY: ${{ env.WP_API_KEY }}
          WP_BASIC_AUTH_USER: ${{ secrets.WP_BASIC_AUTH_USER }}
          WP_BASIC_AUTH_PASS: ${{ secrets.WP_BASIC_AUTH_PASS }}
          WP_BASE_URL: ${{ secrets.WP_BASE_URL }}

      - name: ✅ Notify completion
        run: echo "WordPress import complete."
