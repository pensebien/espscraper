name: WordPress Import (Product-by-Product)

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Import mode (sync or override)'
        required: false
        default: 'sync'
        type: choice
        options:
          - sync
          - override
      product_limit:
        description: 'Maximum number of products to import'
        required: false
        default: '100'
        type: string
      use_enhanced_files:
        description: 'Use enhanced files (with FPD config) instead of regular batch files'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      environment:
        description: 'Environment for .env file (dev, staging, prod)'
        required: false
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  contents: read

jobs:
  import_to_wordpress:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout repo
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: üì• Handle Git LFS files
        run: |
          echo "=== Handling Git LFS files ==="
          # Install git-lfs if not available
          if ! command -v git-lfs &> /dev/null; then
            echo "Installing git-lfs..."
            curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash
            sudo apt-get install git-lfs
          fi

          # Initialize git-lfs and pull actual files
          git lfs install
          git lfs pull

          echo "=== Checking available files after LFS pull ==="
          ls -la batch/ 2>/dev/null || echo "No batch directory found"
          ls -la enhanced/ 2>/dev/null || echo "No enhanced directory found"
          find . -name "*.jsonl" -type f | head -10 || echo "No JSONL files found"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üì¶ Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üì• Fetch latest files from artifacts branch
        run: |
          echo "=== Fetching latest files from artifacts branch ==="

          # Check if artifacts branch exists
          if git ls-remote --heads origin artifacts | grep -q artifacts; then
            echo "‚úÖ Artifacts branch exists, fetching latest files..."

            # Fetch the artifacts branch
            git fetch origin artifacts:artifacts || echo "Could not fetch artifacts branch"

            # Check what we have in the artifacts branch
            echo "=== Contents of artifacts branch ==="
            git ls-tree -r artifacts --name-only | grep -E "\.(jsonl|json)$" || echo "No JSON/JSONL files found in artifacts branch"

            # Pull LFS files from artifacts branch specifically
            echo "=== Pulling LFS files from artifacts branch ==="
            git lfs pull origin artifacts --include="*.jsonl" || echo "No LFS files to pull from artifacts branch"

            # Copy latest files if they exist (handle Git LFS)
            if [ -f "artifacts/espscraper/data/api_scraped_links.jsonl" ]; then
              cp artifacts/espscraper/data/api_scraped_links.jsonl espscraper/data/
              echo "‚úÖ Updated api_scraped_links.jsonl from artifacts branch"
            fi

            if [ -f "artifacts/final_product_details.jsonl" ]; then
              cp artifacts/final_product_details.jsonl espscraper/data/
              echo "‚úÖ Updated final_product_details.jsonl from artifacts branch"
            fi

            # Copy batch files with better error handling
            if [ -d "artifacts/batch" ]; then
              echo "=== Copying batch files from artifacts/batch/ ==="
              ls -la artifacts/batch/ || echo "No files in artifacts/batch/"

              # First, ensure we have the actual files (not LFS pointers)
              echo "=== Checking if batch files are LFS pointers ==="
              for file in artifacts/batch/*.jsonl; do
                if [ -f "$file" ]; then
                  echo "File: $file"
                  file -b "$file" || echo "Could not determine file type"
                  head -c 100 "$file" || echo "Could not read file"
                fi
              done

              # Try to pull LFS files specifically for batch directory
              echo "=== Pulling LFS files for batch directory ==="
              git lfs pull --include="batch/*.jsonl" || echo "No LFS files to pull for batch"

              # Copy all JSONL files from artifacts/batch to local batch/
              echo "=== Copying batch files ==="
              cp artifacts/batch/*.jsonl batch/ 2>/dev/null || echo "No batch files to copy"

              echo "=== Batch files after copy ==="
              ls -la batch/ || echo "No batch files found after copy"

              # Verify the copied files are actual files, not pointers
              echo "=== Verifying copied batch files ==="
              for file in batch/*.jsonl; do
                if [ -f "$file" ]; then
                  echo "Copied file: $file"
                  file -b "$file" || echo "Could not determine file type"
                  wc -l "$file" || echo "Could not count lines"
                fi
              done
            else
              echo "‚ö†Ô∏è No artifacts/batch directory found"
            fi

            # Copy enhanced files if they exist
            if [ -d "artifacts/enhanced" ]; then
              echo "=== Copying enhanced files from artifacts/enhanced/ ==="
              ls -la artifacts/enhanced/ || echo "No files in artifacts/enhanced/"

              # Try to pull LFS files specifically for enhanced directory
              echo "=== Pulling LFS files for enhanced directory ==="
              git lfs pull --include="enhanced/*.jsonl" || echo "No LFS files to pull for enhanced"

              # Copy all JSONL files from artifacts/enhanced to local enhanced/
              echo "=== Copying enhanced files ==="
              cp artifacts/enhanced/*.jsonl enhanced/ 2>/dev/null || echo "No enhanced files to copy"

              echo "=== Enhanced files after copy ==="
              ls -la enhanced/ || echo "No enhanced files found after copy"

              # Verify the copied files are actual files, not pointers
              echo "=== Verifying copied enhanced files ==="
              for file in enhanced/*.jsonl; do
                if [ -f "$file" ]; then
                  echo "Copied file: $file"
                  file -b "$file" || echo "Could not determine file type"
                  wc -l "$file" || echo "Could not count lines"
                fi
              done
            else
              echo "‚ö†Ô∏è No artifacts/enhanced directory found"
            fi

            # Show file sizes after update
            echo "=== File sizes after update ==="
            ls -la espscraper/data/*.jsonl 2>/dev/null || echo "No JSONL files found in espscraper/data"
            ls -la batch/*.jsonl 2>/dev/null || echo "No batch files found in batch/"
            ls -la enhanced/*.jsonl 2>/dev/null || echo "No enhanced files found in enhanced/"

          else
            echo "‚ö†Ô∏è Artifacts branch does not exist yet, starting fresh"
          fi

      - name: Load Environment Variables
        run: |
          echo "Loading environment variables..."

          # Check for environment-specific .env file first
          if [ -f ".env.${{ github.event.inputs.environment || 'dev' }}" ]; then
            export $(cat ".env.${{ github.event.inputs.environment || 'dev' }}" | grep -v '^#' | xargs)
            echo "‚úÖ Environment variables loaded from .env.${{ github.event.inputs.environment || 'dev' }}"
          elif [ -f .env ]; then
            export $(cat .env | grep -v '^#' | xargs)
            echo "‚úÖ Environment variables loaded from .env"
          else
            echo "‚ö†Ô∏è  No .env file found, using GitHub secrets"
          fi

          # Set WP_BASE_URL from .env or GitHub secret
          if [ -n "$WP_BASE_URL" ]; then
            echo "Using WP_BASE_URL from .env: $WP_BASE_URL"
          else
            echo "Using WP_BASE_URL from GitHub secret"
            export WP_BASE_URL="${{ secrets.WP_BASE_URL }}"
          fi

      - name: Get WordPress API parameters
        id: wp_params
        run: |
          echo "Fetching API parameters from WordPress..."

          # Use the correct secret name
          response=$(curl -s -w "\n%{http_code}" \
            -H "X-API-Key: ${{ secrets.WP_API_SECRET }}" \
            "$WP_BASE_URL/wp-json/promostandards-importer/v1/github-params")

          # Extract status code and body
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n -1)

          echo "HTTP Status: $http_code"
          echo "Response: $body"

          if [ "$http_code" -eq 200 ]; then
            # Parse JSON response using jq
            api_url=$(echo "$body" | jq -r '.api_url // empty')
            api_key=$(echo "$body" | jq -r '.api_key // empty')

            if [ -n "$api_url" ] && [ -n "$api_key" ]; then
              echo "api_url=$api_url" >> $GITHUB_OUTPUT
              echo "api_key=$api_key" >> $GITHUB_OUTPUT
              echo "‚úÖ Successfully fetched API parameters"
            else
              echo "‚ùå Missing api_url or api_key in response"
              exit 1
            fi
          else
            echo "‚ùå Failed to fetch API parameters. Status: $http_code"
            echo "Response: $body"
            exit 1
          fi
        env:
          WP_BASE_URL: ${{ env.WP_BASE_URL }}

      - name: Set Environment Variables
        run: |
          echo "WP_API_URL=${{ steps.wp_params.outputs.api_url }}" >> $GITHUB_ENV
          echo "WP_API_KEY=${{ steps.wp_params.outputs.api_key }}" >> $GITHUB_ENV
          echo "WP_BASE_URL=${{ env.WP_BASE_URL }}" >> $GITHUB_ENV
          echo "IMPORT_MODE=${{ github.event.inputs.mode }}" >> $GITHUB_ENV
          echo "PRODUCT_LIMIT=${{ github.event.inputs.product_limit }}" >> $GITHUB_ENV
          echo "USE_ENHANCED_FILES=${{ github.event.inputs.use_enhanced_files }}" >> $GITHUB_ENV

          # Set basic auth variables only if they exist (optional)
          if [ -n "${{ secrets.WP_BASIC_AUTH_USER }}" ]; then
            echo "WP_BASIC_AUTH_USER=${{ secrets.WP_BASIC_AUTH_USER }}" >> $GITHUB_ENV
          fi
          if [ -n "${{ secrets.WP_BASIC_AUTH_PASS }}" ]; then
            echo "WP_BASIC_AUTH_PASS=${{ secrets.WP_BASIC_AUTH_PASS }}" >> $GITHUB_ENV
          fi

      - name: Debug API URL and Key
        run: |
          echo "=== Debug: API URL and Key ==="
          echo "WP_API_URL: '$WP_API_URL'"
          echo "WP_API_KEY: '${WP_API_KEY:0:10}...' (showing first 10 chars)"
          echo "WP_BASE_URL: '$WP_BASE_URL'"
          echo "Use Enhanced Files: ${{ github.event.inputs.use_enhanced_files }}"
          echo "Import Mode: ${{ github.event.inputs.mode }}"
          echo "Product Limit: ${{ github.event.inputs.product_limit }}"

          # Check if basic auth is configured
          if [ -n "$WP_BASIC_AUTH_USER" ]; then
            echo "WP_BASIC_AUTH_USER: '$WP_BASIC_AUTH_USER' (configured)"
          else
            echo "WP_BASIC_AUTH_USER: Not configured (optional)"
          fi

          if [ -n "$WP_BASIC_AUTH_PASS" ]; then
            echo "WP_BASIC_AUTH_PASS: '***' (configured)"
          else
            echo "WP_BASIC_AUTH_PASS: Not configured (optional)"
          fi

          echo "=== End Debug ==="
        env:
          WP_API_URL: ${{ env.WP_API_URL }}
          WP_API_KEY: ${{ env.WP_API_KEY }}
          WP_BASE_URL: ${{ env.WP_BASE_URL }}
          WP_BASIC_AUTH_USER: ${{ env.WP_BASIC_AUTH_USER }}
          WP_BASIC_AUTH_PASS: ${{ env.WP_BASIC_AUTH_PASS }}

      - name: üöÄ Run WordPress Import
        run: |
          echo "=== Starting WordPress Import ==="
          echo "Mode: ${{ github.event.inputs.mode || 'sync' }}"
          echo "Product Limit: ${{ github.event.inputs.product_limit || '100' }}"
          echo "Use Enhanced Files: ${{ github.event.inputs.use_enhanced_files || 'true' }}"
          echo "API URL: $WP_API_URL"
          echo "API Key: ${WP_API_KEY:0:10}..." # Show first 10 chars of API key
          echo "Base URL: $WP_BASE_URL"

          # Check basic auth configuration
          if [ -n "$WP_BASIC_AUTH_USER" ] && [ -n "$WP_BASIC_AUTH_PASS" ]; then
            echo "Basic Auth: Configured (User: $WP_BASIC_AUTH_USER)"
          else
            echo "Basic Auth: Not configured (using API key only)"
          fi

          echo "=== Running Import Script ==="

          python3 import_to_wordpress.py \
            --mode ${{ github.event.inputs.mode || 'sync' }} \
            --product-limit ${{ github.event.inputs.product_limit || '100' }} \
            --use-enhanced-files ${{ github.event.inputs.use_enhanced_files || 'true' }} \
            --wp-api-url "$WP_API_URL" \
            --wp-api-key "$WP_API_KEY" \
            --wp-basic-auth-user "${WP_BASIC_AUTH_USER:-}" \
            --wp-basic-auth-pass "${WP_BASIC_AUTH_PASS:-}"
        env:
          WP_API_URL: ${{ env.WP_API_URL }}
          WP_API_KEY: ${{ env.WP_API_KEY }}
          WP_BASE_URL: ${{ env.WP_BASE_URL }}
          WP_BASIC_AUTH_USER: ${{ env.WP_BASIC_AUTH_USER }}
          WP_BASIC_AUTH_PASS: ${{ env.WP_BASIC_AUTH_PASS }}

      - name: ‚úÖ Notify completion
        run: echo "WordPress import complete."
