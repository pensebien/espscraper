name: Fixer Enhancement Workflow (Chunked Processing)

on:
  workflow_dispatch:
    inputs:
      batch_file:
        description: 'Batch file to enhance (e.g., batch_20250713_080055_2.jsonl) - leave empty to process all batch files with chunking'
        required: false
        type: string
        default: ''
      max_products:
        description: 'Maximum number of products to process (optional)'
        required: false
        type: string
        default: ''
      force_reprocess:
        description: 'Force reprocessing even if enhanced file exists'
        required: false
        type: boolean
        default: false
      resume:
        description: 'Resume from last processed state'
        required: false
        type: boolean
        default: false
      # New chunking parameters
      max_batch_files:
        description: 'Maximum batch files to process per run (for chunking)'
        required: false
        type: string
        default: '2'
      max_time_minutes:
        description: 'Maximum processing time in minutes before stopping'
        required: false
        type: string
        default: '180'
      start_batch_index:
        description: 'Start processing from this batch file index (0-based)'
        required: false
        type: string
        default: '0'
      auto_restart:
        description: 'Automatically restart workflow with remaining files'
        required: false
        type: boolean
        default: true
      skip_art_templates:
        description: 'Skip downloading art templates (faster processing)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  enhance-batch-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install requests beautifulsoup4
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Checkout artifacts branch
        uses: actions/checkout@v4
        with:
          ref: artifacts
          path: artifacts-branch

      - name: Create directories
        run: |
          echo "📁 Creating directories..."
          mkdir -p batch
          mkdir -p enhanced

      - name: Copy batch files from artifacts branch
        run: |
          echo "📄 Copying batch files from artifacts branch..."

          # Debug: Check what's in artifacts-branch
          echo "📁 Current directory: $(pwd)"
          echo "📁 Contents of current directory:"
          ls -la
          echo "📁 Contents of artifacts-branch directory:"
          ls -la artifacts-branch/ || echo "artifacts-branch directory not found"

          # Copy batch files from artifacts branch
          if [ -d "artifacts-branch/batch" ]; then
            echo "📁 Found artifacts-branch/batch directory"
            echo "📄 Contents of artifacts-branch/batch:"
            ls -la artifacts-branch/batch/
            cp artifacts-branch/batch/*.jsonl batch/ 2>/dev/null || echo "No batch files to copy"
            echo "✅ Copied batch files from artifacts branch"
          else
            echo "⚠️ No batch directory in artifacts branch"
            echo "📁 Available directories in artifacts-branch:"
            ls -la artifacts-branch/ || echo "artifacts-branch not accessible"
          fi

          # Also check for batch files in root of artifacts branch
          if ls artifacts-branch/batch_*.jsonl 1>/dev/null 2>&1; then
            echo "📄 Found batch files in artifacts-branch root"
            cp artifacts-branch/batch_*.jsonl batch/ 2>/dev/null || echo "No batch files to copy"
            echo "✅ Copied batch files from artifacts branch root"
          fi

          echo "📄 Available batch files from artifacts branch:"
          ls -la batch/*.jsonl 2>/dev/null || echo "No batch files found"

      - name: Load workflow state (if resuming)
        id: load-state
        run: |
          echo "🔄 Loading workflow state for chunking..."
          
          # Check if we're resuming from a previous run
          if [ "${{ github.event.inputs.resume }}" = "true" ]; then
            echo "🔄 Resume mode enabled - checking for existing workflow state"
            
            # Look for workflow state file in artifacts branch
            if [ -f "artifacts-branch/enhanced/workflow_state.json" ]; then
              echo "📄 Found existing workflow state file"
              cp artifacts-branch/enhanced/workflow_state.json enhanced/
              
              # Load state data
              STATE_DATA=$(cat enhanced/workflow_state.json)
              echo "📄 Current workflow state:"
              echo "$STATE_DATA" | jq '.' 2>/dev/null || echo "Could not parse state file"
              
              # Extract next batch index
              NEXT_INDEX=$(echo "$STATE_DATA" | jq -r '.resume_data.next_batch_index // 0' 2>/dev/null || echo "0")
              echo "🔄 Next batch index: $NEXT_INDEX"
              
              # Set start_batch_index to the next index
              echo "start_batch_index=$NEXT_INDEX" >> $GITHUB_ENV
              echo "🔄 Will resume from batch index: $NEXT_INDEX"
            else
              echo "⚠️ No workflow state file found - starting from beginning"
              echo "start_batch_index=0" >> $GITHUB_ENV
            fi
          else
            echo "🔄 Starting fresh - using provided start_batch_index"
            echo "start_batch_index=${{ github.event.inputs.start_batch_index }}" >> $GITHUB_ENV
          fi

      - name: Process batch files with chunking
        run: |
          echo "🔄 Processing batch files with chunking..."
          
          # Get chunking parameters
          MAX_BATCH_FILES="${{ github.event.inputs.max_batch_files }}"
          MAX_TIME_MINUTES="${{ github.event.inputs.max_time_minutes }}"
          START_BATCH_INDEX="${{ env.start_batch_index }}"
          
          echo "🔧 Chunking parameters:"
          echo "   Max batch files per run: $MAX_BATCH_FILES"
          echo "   Max time minutes: $MAX_TIME_MINUTES"
          echo "   Start batch index: $START_BATCH_INDEX"
          echo "   Resume mode: ${{ github.event.inputs.resume }}"
          echo "   Auto restart: ${{ github.event.inputs.auto_restart }}"

          # Determine which files to process
          if [ -n "${{ github.event.inputs.batch_file }}" ]; then
            echo "📄 Processing specific batch file: ${{ github.event.inputs.batch_file }}"
            
            # Process single file (original behavior preserved)
            BATCH_FILE="batch/${{ github.event.inputs.batch_file }}"
            
            if [ ! -f "$BATCH_FILE" ]; then
              echo "❌ Batch file not found: $BATCH_FILE"
              exit 1
            fi
            
            echo "🔄 Processing single file: $BATCH_FILE"
            
            # Run enhancement for single file (no chunking)
            python3 enhance_batch_files_with_art.py \
              --batch-dir batch \
              --log-level DEBUG \
              $([ "${{ github.event.inputs.force_reprocess }}" = "true" ] && echo "--force-reprocess") \
              $([ "${{ github.event.inputs.resume }}" = "true" ] && echo "--resume") \
              $([ "${{ github.event.inputs.skip_art_templates }}" = "true" ] && echo "--skip-art-templates")
              
          else
            echo "📄 Processing ALL batch files with chunking..."
            
            # Find all batch files
            BATCH_FILES=$(ls batch/batch_*.jsonl 2>/dev/null | grep -v "_enhanced" | sort)
            
            if [ -z "$BATCH_FILES" ]; then
              echo "❌ No batch files found to process"
              exit 1
            fi
            
            echo "📄 Found batch files:"
            echo "$BATCH_FILES"
            
            # Run enhancement with chunking parameters
            echo "🔄 Running enhancement with chunking..."
            python3 enhance_batch_files_with_art.py \
              --batch-dir batch \
              --log-level DEBUG \
              --max-batch-files "$MAX_BATCH_FILES" \
              --start-batch-index "$START_BATCH_INDEX" \
              --max-time-minutes "$MAX_TIME_MINUTES" \
              --workflow-state-file "enhanced/workflow_state.json" \
              $([ "${{ github.event.inputs.force_reprocess }}" = "true" ] && echo "--force-reprocess") \
              $([ "${{ github.event.inputs.skip_art_templates }}" = "true" ] && echo "--skip-art-templates")
          fi

      - name: Check results and prepare for auto-restart
        id: check-results
        run: |
          echo "📊 Checking processing results..."
          
          # Check if workflow state was created
          if [ -f "enhanced/workflow_state.json" ]; then
            echo "📄 Workflow state file found"
            STATE_DATA=$(cat enhanced/workflow_state.json)
            
            # Display state information
            echo "📄 Workflow state:"
            echo "$STATE_DATA" | jq '.' 2>/dev/null || echo "Could not parse state file"
            
            # Check if more processing is needed
            STATUS=$(echo "$STATE_DATA" | jq -r '.status' 2>/dev/null || echo "unknown")
            REMAINING_FILES=$(echo "$STATE_DATA" | jq -r '.remaining_batch_files | length' 2>/dev/null || echo "0")
            NEXT_INDEX=$(echo "$STATE_DATA" | jq -r '.resume_data.next_batch_index' 2>/dev/null || echo "0")
            
            echo "📊 Processing status: $STATUS"
            echo "📄 Remaining files: $REMAINING_FILES"
            echo "📄 Next batch index: $NEXT_INDEX"
            
            # Set output variables for next steps
            echo "status=$STATUS" >> $GITHUB_OUTPUT
            echo "remaining_files=$REMAINING_FILES" >> $GITHUB_OUTPUT
            echo "next_index=$NEXT_INDEX" >> $GITHUB_OUTPUT
            
            if [ "$STATUS" = "in_progress" ] && [ "$REMAINING_FILES" -gt 0 ]; then
              echo "🔄 More processing needed - will trigger auto-restart"
              echo "needs_restart=true" >> $GITHUB_OUTPUT
            else
              echo "✅ Processing completed - no restart needed"
              echo "needs_restart=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No workflow state file found"
            echo "status=unknown" >> $GITHUB_OUTPUT
            echo "remaining_files=0" >> $GITHUB_OUTPUT
            echo "next_index=0" >> $GITHUB_OUTPUT
            echo "needs_restart=false" >> $GITHUB_OUTPUT
          fi

      - name: Copy enhanced files to artifacts branch
        run: |
          echo "📝 Copying enhanced files to artifacts branch..."

          # Create directories
          mkdir -p artifacts-branch/enhanced
          mkdir -p artifacts-branch/batch

          # Copy enhanced files
          if [ -d "enhanced" ] && [ "$(ls -A enhanced)" ]; then
            cp enhanced/*_enhanced.jsonl artifacts-branch/enhanced/ 2>/dev/null || echo "No enhanced files to copy"
            cp enhanced/*_enhancement_state.json artifacts-branch/enhanced/ 2>/dev/null || echo "No state files to copy"
            cp enhanced/workflow_state.json artifacts-branch/enhanced/ 2>/dev/null || echo "No workflow state to copy"
            echo "✅ Copied enhanced files and state files"
          else
            echo "⚠️ No enhanced files found"
          fi

          echo "📁 Artifacts branch enhanced directory contents:"
          ls -la artifacts-branch/enhanced/ || echo "No enhanced directory in artifacts branch"

      - name: Commit and push to artifacts branch
        run: |
          cd artifacts-branch
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Check if there are any files to commit
          if [ -n "$(git status --porcelain)" ]; then
            git add .
            git commit -m "Add enhanced files from chunked workflow run ${{ github.run_number }} - $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
            git push origin artifacts
            echo "✅ Successfully pushed enhanced files to artifacts branch"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Auto-restart workflow (if needed)
        if: steps.check-results.outputs.needs_restart == 'true' && github.event.inputs.auto_restart == 'true'
        run: |
          echo "🔄 Auto-restarting workflow with remaining files..."
          
          # Get next batch index
          NEXT_INDEX="${{ steps.check-results.outputs.next_index }}"
          
          echo "📄 Next batch index: $NEXT_INDEX"
          echo "🔄 Triggering next workflow run..."
          
          # Trigger the next workflow run using GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/fixer-enhancement-chunked.yml/dispatches \
            -d '{
              "ref": "main",
              "inputs": {
                "max_batch_files": "${{ github.event.inputs.max_batch_files }}",
                "max_time_minutes": "${{ github.event.inputs.max_time_minutes }}",
                "start_batch_index": "'$NEXT_INDEX'",
                "resume": "true",
                "auto_restart": "${{ github.event.inputs.auto_restart }}",
                "force_reprocess": "${{ github.event.inputs.force_reprocess }}",
                "skip_art_templates": "${{ github.event.inputs.skip_art_templates }}"
              }
            }'
          
          echo "✅ Auto-restart triggered successfully"

      - name: Upload enhanced files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: enhanced-files-chunked
          path: |
            enhanced/*_enhanced.jsonl
            enhanced/*_enhancement_state.json
            enhanced/workflow_state.json
          retention-days: 7

      - name: Completion Message
        run: |
          echo "🎉 Chunked Enhancement Workflow Complete!"
          echo "📦 Check the artifacts for the enhanced files and state information"
          echo ""
          echo "📊 Processing Summary:"
          echo "   Status: ${{ steps.check-results.outputs.status }}"
          echo "   Remaining files: ${{ steps.check-results.outputs.remaining_files }}"
          echo "   Next batch index: ${{ steps.check-results.outputs.next_index }}"
          echo "   Auto-restart: ${{ steps.check-results.outputs.needs_restart }}"
          echo ""
          echo "🔄 Next steps:"
          if [ "${{ steps.check-results.outputs.needs_restart }}" = "true" ]; then
            echo "1. Auto-restart triggered for remaining files"
            echo "2. Next run will start from batch index: ${{ steps.check-results.outputs.next_index }}"
            echo "3. Processing will continue automatically"
          else
            echo "1. All batch files processed successfully"
            echo "2. Enhanced files are ready for WordPress import"
            echo "3. FPD configurations are complete"
          fi
          echo ""
          echo "🎨 Enhanced features:"
          echo "- HitPromo images fetched for all color variants"
          echo "- Smart chunking prevents timeout issues"
          echo "- Auto-restart capability for large batch processing"
          echo "- State persistence for reliable resuming"
          echo "- Optional art template downloading (use skip_art_templates for faster processing)"
