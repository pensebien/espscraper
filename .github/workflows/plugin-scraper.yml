name: Plugin Scraper (Streaming + Batch Save)

on:
  workflow_dispatch:
    inputs:
      limit:
        description: 'Product limit'
        required: false
        default: '500'
      resume:
        description: 'Resume previous run'
        required: false
        default: 'false'
      mode:
        description: 'Scraping mode (scrape, override, sync)'
        required: false
        default: 'scrape'
      existing_products:
        description: 'Existing product IDs (JSON)'
        required: false
        default: ''
      api_url:
        description: 'API URL for uploads'
        required: false
        default: ''
      api_key:
        description: 'API key for uploads'
        required: false
        default: ''
      wp_api_url:
        description: 'WP existing-products endpoint'
        required: false
        default: ''
      wp_api_key:
        description: 'WP API key'
        required: false
        default: ''

permissions:
  contents: write


jobs:
  scrape_and_upload:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repo
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: 🔧 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Cache Chrome WebDriver
        uses: actions/cache@v4
        with:
          path: ~/.cache/selenium
          key: ${{ runner.os }}-selenium-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-selenium-

      - name: 📦 Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Cache scraped data
        uses: actions/cache@v4
        with:
          path: |
            espscraper/data
            tmp
            log
          key: ${{ runner.os }}-scraped-data-${{ hashFiles('**/requirements.txt') }}-${{ github.run_number }}
          restore-keys: |
            ${{ runner.os }}-scraped-data-${{ hashFiles('**/requirements.txt') }}-

      - name: 📁 Create directories
        run: |
          mkdir -p espscraper/data
          mkdir -p tmp
          mkdir -p log

      - name: 🔍 Check if product links exist
        run: |
          echo "=== Checking for product links ==="
          if [ -f "espscraper/data/api_scraped_links.jsonl" ]; then
            link_count=$(wc -l < espscraper/data/api_scraped_links.jsonl)
            echo "✅ Found product links file with $link_count lines"
            head -3 espscraper/data/api_scraped_links.jsonl || echo "Could not read first few lines"
          else
            echo "⚠️ No product links file found at espscraper/data/api_scraped_links.jsonl"
            echo "Creating empty links file for testing..."
            echo '{"id": "test", "url": "https://example.com"}' > espscraper/data/api_scraped_links.jsonl
          fi

      - name: 📥 Fetch latest files from artifacts branch
        run: |
          echo "=== Fetching latest files from artifacts branch ==="
          
          # Try to fetch the artifacts branch
          if git ls-remote --heads origin artifacts | grep -q artifacts; then
            echo "✅ Artifacts branch exists, fetching latest files..."
            
            # Fetch the artifacts branch
            git fetch origin artifacts:artifacts || echo "Could not fetch artifacts branch"
            
            # Copy latest files if they exist
            if [ -f "artifacts-branch/espscraper/data/api_scraped_links.jsonl" ]; then
              cp artifacts-branch/espscraper/data/api_scraped_links.jsonl espscraper/data/
              echo "✅ Updated api_scraped_links.jsonl from artifacts branch"
            fi
            
            if [ -f "artifacts-branch/final_product_details.jsonl" ]; then
              cp artifacts-branch/final_product_details.jsonl espscraper/data/
              echo "✅ Updated final_product_details.jsonl from artifacts branch"
            fi
            
            if [ -d "artifacts-branch/batches" ]; then
              cp -r artifacts-branch/batches/* . || echo "No batch files to copy"
              echo "✅ Updated batch files from artifacts branch"
            fi
            
            # Show file sizes after update
            echo "=== File sizes after update ==="
            ls -la espscraper/data/*.jsonl || echo "No JSONL files found"
            ls -la batch_*.jsonl 2>/dev/null || echo "No batch files found"
            
          else
            echo "⚠️ Artifacts branch does not exist yet, starting fresh"
          fi

      - name: 📋 Create/Update product index
        run: |
          echo "=== Creating/Updating product index ==="
          python3 create_index.py
          
          # Show index stats
          if [ -f "espscraper/data/product_index.json" ]; then
            echo "=== Product index stats ==="
            python3 -c "import json; data=json.load(open('espscraper/data/product_index.json')); print(f'Total products in index: {len(data)}')"
          fi

      - name: Fetch API URL and Key from WordPress (Optional)
        id: get_params
        run: |
          # Try to fetch from WordPress, but don't fail if it doesn't work
          curl -s -u "${{ secrets.WP_BASIC_AUTH_USER }}:${{ secrets.WP_BASIC_AUTH_PASS }}" "$WP_BASE_URL/wp-json/promostandards-importer/v1/github-params?secret=${{ secrets.WP_API_SECRET }}" > params.json || echo '{"api_url": "", "api_key": ""}' > params.json
          echo "WP_API_URL=$(jq -r .api_url params.json)" >> $GITHUB_ENV
          echo "WP_API_KEY=$(jq -r .api_key params.json)" >> $GITHUB_ENV
          echo "WordPress integration status: $(jq -r .api_url params.json | grep -q '^$' && echo 'Not configured' || echo 'Configured')"
        env:
          WP_BASE_URL: ${{ secrets.WP_BASE_URL }}
# Added the neccessary weblink using LocalWP livelink 
      - name: 🚀 Run ESP scraper (streaming upload + batch save)
        run: |
          python3 -m espscraper.production_main \
            --limit ${{ github.event.inputs.limit || '1000' }} \
            --headless \
            --mode ${{ github.event.inputs.mode || 'scrape' }}
        env:
          ESP_USERNAME: ${{ secrets.ESP_USERNAME }}
          ESP_PASSWORD: ${{ secrets.ESP_PASSWORD }}
          PRODUCTS_URL: ${{ secrets.PRODUCTS_URL }}
          SEARCH_API_URL: ${{ secrets.SEARCH_API_URL }}
          GOTO_PAGE_API_URL: ${{ secrets.GOTO_PAGE_API_URL }}
          WP_API_URL: ${{ github.event.inputs.api_url }}
          WP_API_KEY: ${{ github.event.inputs.api_key }}
          WP_EXISTING_PRODUCTS_URL: ${{ github.event.inputs.wp_api_url }}
          WP_EXISTING_PRODUCTS_KEY: ${{ github.event.inputs.wp_api_key }}
          WP_BASIC_AUTH_USER: ${{ secrets.WP_BASIC_AUTH_USER }}
          WP_BASIC_AUTH_PASS: ${{ secrets.WP_BASIC_AUTH_PASS }}
          WP_BASE_URL: ${{ secrets.WP_BASE_URL }}

      - name: 🏁 Final Import Pass to WordPress
        run: |
          python3 -m espscraper.production_main --final-import --headless
        env:
          ESP_USERNAME: ${{ secrets.ESP_USERNAME }}
          ESP_PASSWORD: ${{ secrets.ESP_PASSWORD }}
          PRODUCTS_URL: ${{ secrets.PRODUCTS_URL }}
          SEARCH_API_URL: ${{ secrets.SEARCH_API_URL }}
          GOTO_PAGE_API_URL: ${{ secrets.GOTO_PAGE_API_URL }}
          WP_API_URL: ${{ github.event.inputs.api_url }}
          WP_API_KEY: ${{ github.event.inputs.api_key }}
          WP_EXISTING_PRODUCTS_URL: ${{ github.event.inputs.wp_api_url }}
          WP_EXISTING_PRODUCTS_KEY: ${{ github.event.inputs.wp_api_key }}
          WP_BASIC_AUTH_USER: ${{ secrets.WP_BASIC_AUTH_USER }}
          WP_BASIC_AUTH_PASS: ${{ secrets.WP_BASIC_AUTH_PASS }}
          WP_BASE_URL: ${{ secrets.WP_BASE_URL }}

      - name: 🔧 Create minimal batch file if none exist
        run: |
          echo "=== Checking for batch files after scraper run ==="
          if ls batch_*.jsonl 1> /dev/null 2>&1; then
            echo "✅ Batch files found, no need to create minimal file"
          else
            echo "⚠️ No batch files found, creating minimal batch file for testing"
            echo '{"ProductID": "test", "Name": "Test Product", "Status": "No products processed"}' > batch_test_$(date +%s)_1.jsonl
            echo "✅ Created minimal batch file for testing"
          fi

      - name: 📦 Checkout artifacts branch
        uses: actions/checkout@v4
        with:
          ref: artifacts
          path: artifacts-branch

      - name: 📝 Copy batch files to artifacts branch
        run: |
          echo "=== Current directory contents ==="
          ls -la
          echo "=== espscraper/data contents ==="
          ls -la espscraper/data/ || echo "No data directory"
          echo "=== tmp directory contents ==="
          ls -la tmp/ || echo "No tmp directory"
          echo "=== Looking for batch files ==="
          find . -name "batch_*.jsonl" -type f || echo "No batch files found"
          echo "=== Looking for any JSONL files ==="
          find . -name "*.jsonl" -type f || echo "No JSONL files found"
          
          mkdir -p artifacts-branch/batches
          
          # Copy batch files if they exist
          if ls batch_*.jsonl 1> /dev/null 2>&1; then
            cp batch_*.jsonl artifacts-branch/batches/
            echo "✅ Copied batch files to artifacts branch"
          else
            echo "⚠️ No batch files found to copy"
          fi
          
          # Also copy any JSONL files from data directory
          if ls espscraper/data/*.jsonl 1> /dev/null 2>&1; then
            cp espscraper/data/*.jsonl artifacts-branch/batches/
            echo "✅ Copied data directory JSONL files to artifacts branch"
          else
            echo "⚠️ No JSONL files found in data directory"
          fi
          
          # Copy the main output file if it exists
          if [ -f "espscraper/data/final_product_details.jsonl" ]; then
            cp espscraper/data/final_product_details.jsonl artifacts-branch/
            echo "✅ Copied main output file to artifacts branch"
          elif [ -f "final_product_details.jsonl" ]; then
            cp final_product_details.jsonl artifacts-branch/
            echo "✅ Copied main output file to artifacts branch"
          else
            echo "⚠️ No main output file found"
          fi
          
          # Copy the product index file if it exists
          if [ -f "espscraper/data/product_index.json" ]; then
            cp espscraper/data/product_index.json artifacts-branch/
            echo "✅ Copied product index file to artifacts branch"
          else
            echo "⚠️ No product index file found"
          fi

      - name: 🚀 Commit and push batch files
        run: |
          cd artifacts-branch
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are any files to commit
          if [ -n "$(ls -A batches/ 2>/dev/null)" ] || [ -f "final_product_details.jsonl" ] || [ -f "product_index.json" ]; then
            git add batches/
            git add final_product_details.jsonl || echo "No main output file to add"
            git add product_index.json || echo "No product index file to add"
            git commit -m "Add batch files, main output, and product index from workflow run $(date)" || echo "No changes to commit"
            git push origin artifacts
            echo "✅ Pushed batch files, main output, and product index to artifacts branch"
          else
            echo "⚠️ No files to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📋 List created files
        run: |
          echo "=== Files created ==="
          ls -la *.jsonl || echo "No JSONL files found"
          ls -la espscraper/data/ || echo "No data files found"
          echo "=== Batch files in artifacts branch ==="
          ls -la artifacts-branch/batches/ || echo "No batch files in artifacts branch"
          echo "=== End of files ==="

      - name: ✅ Notify completion
        run: echo "Scraper run, streaming upload, and batch save complete."